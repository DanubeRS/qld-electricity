/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v9.5.6256.39766 (NJsonSchema v8.5.6255.20253) (http://NSwag.org)
// </auto-generated>
//----------------------


export interface IClient {
    /**
     * Gets power consumption data, with an optional window specified
     * @return Success
     */
    apiDataPowerGet(begin: Date, end: Date): Promise<PowerDataResponseModel>;
    /**
     * Gets power consumption data, with an optional window specified
     * @return Success
     */
    apiDataWeatherByStationIdGet(stationId: string, begin: Date, end: Date): Promise<WeatherDataResponseModel>;
}

export class Client implements IClient {
    private baseUrl: string; 
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.baseUrl = baseUrl ? baseUrl : "";
        this.http = http ? http : window;
    }

    /**
     * Gets power consumption data, with an optional window specified
     * @return Success
     */
    apiDataPowerGet(begin: Date, end: Date): Promise<PowerDataResponseModel> {
        let url_ = this.baseUrl + "/api/data/power?";
        if (begin !== undefined)
            url_ += "begin=" + encodeURIComponent("" + begin.toJSON()) + "&"; 
        if (end !== undefined)
            url_ += "end=" + encodeURIComponent("" + end.toJSON()) + "&";

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            }
        };

        return this.http.fetch(url_, options_).then((response: Response) => {
            return this.processApiDataPowerGet(response);
        });
    }

    protected processApiDataPowerGet(response: Response): Promise<PowerDataResponseModel> {
        return response.text().then((responseText) => {
            const status = response.status; 

            if (status === 200) {
                let result200: PowerDataResponseModel = null;
                result200 = responseText === "" ? null : <PowerDataResponseModel>JSON.parse(responseText, this.jsonParseReviver);
                return result200;
            } else if (status === 404) {
                this.throwException("A server error occurred.", status, responseText);
            } else if (status === 400) {
                let result400: ErrorResponseModel = null;
                result400 = responseText === "" ? null : <ErrorResponseModel>JSON.parse(responseText, this.jsonParseReviver);
                this.throwException("A server error occurred.", status, responseText, result400);
            } else if (status !== 200 && status !== 204) {
                this.throwException("An unexpected server error occurred.", status, responseText);
            }
            return null;
        });
    }

    /**
     * Gets power consumption data, with an optional window specified
     * @return Success
     */
    apiDataWeatherByStationIdGet(stationId: string, begin: Date, end: Date): Promise<WeatherDataResponseModel> {
        let url_ = this.baseUrl + "/api/data/weather/{stationId}?";
        if (stationId === undefined || stationId === null)
            throw new Error("The parameter 'stationId' must be defined.");
        url_ = url_.replace("{stationId}", encodeURIComponent("" + stationId)); 
        if (begin !== undefined)
            url_ += "begin=" + encodeURIComponent("" + begin.toJSON()) + "&"; 
        if (end !== undefined)
            url_ += "end=" + encodeURIComponent("" + end.toJSON()) + "&";

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            }
        };

        return this.http.fetch(url_, options_).then((response: Response) => {
            return this.processApiDataWeatherByStationIdGet(response);
        });
    }

    protected processApiDataWeatherByStationIdGet(response: Response): Promise<WeatherDataResponseModel> {
        return response.text().then((responseText) => {
            const status = response.status; 

            if (status === 200) {
                let result200: WeatherDataResponseModel = null;
                result200 = responseText === "" ? null : <WeatherDataResponseModel>JSON.parse(responseText, this.jsonParseReviver);
                return result200;
            } else if (status === 404) {
                this.throwException("A server error occurred.", status, responseText);
            } else if (status === 400) {
                let result400: ErrorResponseModel = null;
                result400 = responseText === "" ? null : <ErrorResponseModel>JSON.parse(responseText, this.jsonParseReviver);
                this.throwException("A server error occurred.", status, responseText, result400);
            } else if (status !== 200 && status !== 204) {
                this.throwException("An unexpected server error occurred.", status, responseText);
            }
            return null;
        });
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

/** Response model for power consumption data */
export interface PowerDataResponseModel {
    /** Start time of the current model payload */
    readonly startTime?: Date;
    /** End time of the current model payload */
    readonly endTime?: Date;
    /** Data nodes constituting the current model */
    readonly nodes?: PowerDataNodeModel[];
}

/** Data node for power data, representing power statistics at a set timestamp */
export interface PowerDataNodeModel {
    /** Timestamp of the current node model */
    readonly timestamp?: Date;
    /** Provider of the power consumption data */
    readonly provider?: string;
    /** Value of the power state at the timestamp */
    readonly value?: PowerDataNodeValueModel;
}

/** Values (absolute and derived) of current power usage */
export interface PowerDataNodeValueModel {
    /** Instantaneous absolute value of power consumption */
    readonly instantaneous?: number;
    /** Cumulative power consumption, usually from a window defined in the parent payload */
    readonly cumulative?: number;
    /** Change in power consumption since the last data node. Used to identify rate of power consumption change */
    readonly trend?: number;
}

/** Generic error response model, containing message, code, and other detailed information */
export interface ErrorResponseModel {
    /** Error type Id */
    readonly id?: number;
    /** Unique request Id */
    readonly requestId?: string;
    /** Friendly error message */
    readonly message?: string;
    /** Additional error context payload */
    payload?: any;
}

export interface WeatherDataResponseModel {
    startTime?: Date;
    endTime?: Date;
    nodes?: WeatherDataNodeModel[];
}

export interface WeatherDataNodeModel {
    timestamp?: Date;
    station?: string;
    value?: WeatherDataNodeValueModel;
}

export interface WeatherDataNodeValueModel {
    airTemp?: number;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    result: any; 

    constructor(message: string, status: number, response: string, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}